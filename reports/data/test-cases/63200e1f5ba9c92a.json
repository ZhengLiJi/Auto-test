{
  "uid" : "63200e1f5ba9c92a",
  "name" : "xendit1qudao",
  "fullName" : "case.test_fas_pay.TestCreateOrder#test_create_order",
  "historyId" : "211971bace0ca914d15c8dc5c596a3fd",
  "time" : {
    "start" : 1709200924278,
    "stop" : 1709200925702,
    "duration" : 1424
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 断言失败: 实际结果为 88011, 期望结果为 '200'\nassert '88011' == '200'\n  - 200\n  + 88011",
  "statusTrace" : "self = <case.test_fas_pay.TestCreateOrder object at 0x0000020FEF66B880>\ndata = {'amount': '10000', 'currency': 'IDR', 'merchantId': '100119', 'payChannel': '2', ...}\n\n    @allure.title('xendit1qudao')\n    @pytest.mark.parametrize(\"data\", xendit1_data)\n    def test_create_order(self, data):\n        # 创建 CreateOrder 实例\n        create_order_xendit = CreateOrder()\n    \n        # 从 data 字典中提取参数\n        merchantId = data['merchantId']\n        productId = data['productId']\n        currency = data['currency']\n        amount = data['amount']\n        payerPhone = data['payerPhone']\n        payChannel = data['payChannel']\n        privateKey = data['privateKey']\n    \n        # 调用 create_order 方法发送请求并获取结果\n        result = create_order_xendit.create_order(merchantId, productId, currency, amount, payerPhone,\n                                                    payChannel, privateKey)\n    \n        # 执行断言，比如检查返回结果是否符合预期\n>       assert result.get('code') == '200', f\"断言失败: 实际结果为 {result.get('code')}, 期望结果为 '200'\"\nE       AssertionError: 断言失败: 实际结果为 88011, 期望结果为 '200'\nE       assert '88011' == '200'\nE         - 200\nE         + 88011\n\ntest_fas_pay.py:37: AssertionError",
  "flaky" : true,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_fas_pay"
  }, {
    "name" : "subSuite",
    "value" : "TestCreateOrder"
  }, {
    "name" : "host",
    "value" : "LAPTOP-QH40KOLE"
  }, {
    "name" : "thread",
    "value" : "28044-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_fas_pay"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'merchantId': '100119', 'productId': '2023', 'currency': 'IDR', 'amount': '10000', 'payerPhone': '0888888881', 'payChannel': '2', 'privateKey': '97fa79f073c7c5e3c97b00b50b156eaa'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "6d6f88014a3345ef",
      "status" : "failed",
      "statusDetails" : "AssertionError: 断言失败: 实际结果为 88011, 期望结果为 '200'\nassert '88011' == '200'\n  - 200\n  + 88011",
      "time" : {
        "start" : 1709200642604,
        "stop" : 1709200643954,
        "duration" : 1350
      }
    }, {
      "uid" : "5610a60039c05c1a",
      "status" : "failed",
      "statusDetails" : "AssertionError: 断言失败: 实际结果为 88011, 期望结果为 '200'\nassert '88011' == '200'\n  - 200\n  + 88011",
      "time" : {
        "start" : 1709200576402,
        "stop" : 1709200577793,
        "duration" : 1391
      }
    }, {
      "uid" : "a6ffc09725782d6f",
      "status" : "failed",
      "statusDetails" : "AssertionError: 断言失败: 实际结果为 88011, 期望结果为 '200'\nassert '88011' == '200'\n  - 200\n  + 88011",
      "time" : {
        "start" : 1709200461325,
        "stop" : 1709200462719,
        "duration" : 1394
      }
    }, {
      "uid" : "df22a52141f53502",
      "status" : "failed",
      "statusDetails" : "AssertionError: 断言失败: 实际结果为 88011, 期望结果为 '200'\nassert '88011' == '200'\n  - 200\n  + 88011",
      "time" : {
        "start" : 1709200444767,
        "stop" : 1709200446146,
        "duration" : 1379
      }
    }, {
      "uid" : "fab245fc35c0478a",
      "status" : "broken",
      "statusDetails" : "requests.exceptions.ProxyError: HTTPSConnectionPool(host='sit.tikipay.co', port=443): Max retries exceeded with url: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1709200436378&payChannel=2&payerName=test&payerPhone=0888888881&productId=2023&subject=TestSubject&version=1.0&sign=5991dcf97ccab6d7ccc9f07b6d3daa7d (Caused by ProxyError('Unable to connect to proxy', SSLError(SSLError(\"bad handshake: SysCallError(-1, 'Unexpected EOF')\"))))",
      "time" : {
        "start" : 1709200436378,
        "stop" : 1709200436380,
        "duration" : 2
      }
    }, {
      "uid" : "53f199f303511963",
      "status" : "skipped",
      "statusDetails" : "Skipped: 断言失败: 实际结果为 {'code': '88011', 'msg': 'this channel is not supported yet', 'sign': '11b2673263fdfb60886872bb3809f4c5', 'traceId': 'c2253ca6fbd046cabd2aebb2cca3a013'}, 期望结果为 200\nassert {'code': '88011', 'msg': 'this channel is not supported yet', 'sign': '11b2673263fdfb60886872bb3809f4c5', 'traceId': 'c2253ca6fbd046cabd2aebb2cca3a013'} == '200'",
      "time" : {
        "start" : 1709199126769,
        "stop" : 1709199128169,
        "duration" : 1400
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "63200e1f5ba9c92a.json",
  "parameterValues" : [ "{'merchantId': '100119', 'productId': '2023', 'currency': 'IDR', 'amount': '10000', 'payerPhone': '0888888881', 'payChannel': '2', 'privateKey': '97fa79f073c7c5e3c97b00b50b156eaa'}" ]
}