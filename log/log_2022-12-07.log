2022-12-07 09:51:08.891 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 09:51:08 发起post请求:下单
2022-12-07 09:51:08.891 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 09:51:08 请求时的入参: /pay/createOrderparams
2022-12-07 09:51:10.461 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 09:51:10 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 09:55:56.759 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 09:55:56 发起post请求:下单
2022-12-07 09:55:56.759 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 09:55:56 请求时的入参: /pay/createOrderparams
2022-12-07 09:55:58.100 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 09:55:58 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 09:56:27.408 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 09:56:27 发起post请求:下单
2022-12-07 09:56:27.408 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 09:56:27 请求时的入参: /pay/createOrderparams
2022-12-07 09:56:28.729 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 09:56:28 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 09:58:16.947 | DEBUG    | __main__:post:85 - 2022-12-07 09:58:16 发起post请求:模拟xendit dana下单回调成功
2022-12-07 09:58:16.947 | DEBUG    | __main__:post:86 - 2022-12-07 09:58:16 请求时的入参: /pay/createOrderamount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670378296947&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&
2022-12-07 09:58:19.329 | DEBUG    | __main__:post:89 - 2022-12-07 09:58:19 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': '0d86142c4f2f8212a947d8ec6520be2c', 'orderNo': 'TestOrderNo_1670378296947', 'tradeNo': '10012022120708581787400016', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce7v6eji4d4oac5a5dfg', 'payCodeType': '1', 'expireTime': '2022-12-07 09:58:17'}
2022-12-07 09:58:33.881 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 09:58:33 发起post请求:下单
2022-12-07 09:58:33.881 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 09:58:33 请求时的入参: /pay/createOrderparams
2022-12-07 09:58:35.175 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 09:58:35 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 09:59:14.231 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 09:59:14 发起post请求:下单
2022-12-07 09:59:14.232 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 09:59:14 请求时的入参: /pay/createOrderamount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000002207B4CEF40>&orderNo=TestOrderNo_1670378354232&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&
2022-12-07 09:59:15.534 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 09:59:15 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 09:59:44.666 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 09:59:44 发起post请求:下单
2022-12-07 09:59:44.667 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 09:59:44 请求时的入参: /pay/createOrderamount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x0000015DBECDEF40>&orderNo=TestOrderNo_1670378384667&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&
2022-12-07 09:59:45.972 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 09:59:45 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:04:59.522 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:04:59 发起post请求:下单
2022-12-07 10:04:59.522 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:04:59 请求时的入参: /pay/createOrderamount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001D8BCDAEF40>&orderNo=TestOrderNo_1670378699522&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&
2022-12-07 10:05:01.042 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:05:01 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:06:17.662 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:06:17 发起post请求:下单
2022-12-07 10:06:17.662 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:06:17 请求时的入参: /pay/createOrderamount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x00000126EB38EF10>&orderNo=TestOrderNo_1670378777662&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&
2022-12-07 10:06:19.004 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:06:19 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:19:18.920 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:19:18 发起post请求:下单
2022-12-07 10:19:18.920 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:19:18 请求时的入参: /pay/createOrderamount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x0000018009B5EF40>&orderNo=TestOrderNo_1670379558920&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&
2022-12-07 10:19:20.432 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:19:20 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:20:10.972 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:20:10 发起post请求:下单
2022-12-07 10:20:10.972 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:20:10 请求时的入参: /pay/createOrderamount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001E0F57AEF10>&orderNo=TestOrderNo_1670379610973&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&
2022-12-07 10:20:12.250 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:20:12 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:20:38.137 | DEBUG    | __main__:post:85 - 2022-12-07 10:20:38 发起post请求:模拟xendit dana下单回调成功
2022-12-07 10:20:38.137 | DEBUG    | __main__:post:86 - 2022-12-07 10:20:38 请求时的入参: /pay/createOrderamount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670379638138&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&
2022-12-07 10:20:40.964 | DEBUG    | __main__:post:89 - 2022-12-07 10:20:40 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': 'cbd5b40c0cb74ce63a5fcbc1bc4324d2', 'orderNo': 'TestOrderNo_1670379638138', 'tradeNo': '10012022120709203910900015', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce7vgu3i4d4oac5a5en0', 'payCodeType': '1', 'expireTime': '2022-12-07 10:20:39'}
2022-12-07 10:23:47.201 | DEBUG    | __main__:post:85 - 2022-12-07 10:23:47 发起post请求:模拟xendit dana下单回调成功
2022-12-07 10:23:47.201 | DEBUG    | __main__:post:86 - 2022-12-07 10:23:47 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670379827201&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=898bb2890b77697a55ed3706ef2b2503
2022-12-07 10:23:49.657 | DEBUG    | __main__:post:89 - 2022-12-07 10:23:49 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': 'e769f5518be928c0a2c06a7e70029ba4', 'orderNo': 'TestOrderNo_1670379827201', 'tradeNo': '10012022120709234817500012', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce7vid8pvgtcs06rs7h0', 'payCodeType': '1', 'expireTime': '2022-12-07 10:23:48'}
2022-12-07 10:24:02.955 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:24:02 发起post请求:下单
2022-12-07 10:24:02.955 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:24:02 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x0000026635A5EF40>&orderNo=TestOrderNo_1670379842955&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=7766fcfdbb0a20f7a3922a5c8b212bc6
2022-12-07 10:24:04.256 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:24:04 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:29:08.247 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:29:08 发起post请求:下单
2022-12-07 10:29:08.247 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:29:08 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001796B46FE80>&orderNo=TestOrderNo_1670380148247&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=3ca7c930587b93304cd15920269a1f29
2022-12-07 10:29:09.585 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:29:09 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:29:20.460 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:29:20 发起post请求:下单
2022-12-07 10:29:20.460 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:29:20 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001BA1EB2EF10>&orderNo=TestOrderNo_1670380160460&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=c152962983aa2b441fdb6b5f40593d2a
2022-12-07 10:29:21.944 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:29:21 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:30:37.498 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:30:37 发起post请求:下单
2022-12-07 10:30:37.498 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:30:37 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x0000022D373AEF10>&orderNo=TestOrderNo_1670380237498&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=71552ec73f53bb2427662b88a20aa2bd
2022-12-07 10:30:38.784 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:30:38 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:34:24.323 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:34:24 发起post请求:下单
2022-12-07 10:34:24.323 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:34:24 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001286478EF10>&orderNo=TestOrderNo_1670380464324&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=d009ce94adede6e4d069e9e32bc5709b
2022-12-07 10:34:25.684 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:34:25 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:37:43.058 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:37:43 发起post请求:下单
2022-12-07 10:37:43.058 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:37:43 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001CE3345EF10>&orderNo=TestOrderNo_1670380663058&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=d4ac9bf79e5734de1df114f2908c8a99
2022-12-07 10:37:44.383 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:37:44 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:41:07.428 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:41:07 发起post请求:下单
2022-12-07 10:41:07.428 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:41:07 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001EEF1FEEF10>&orderNo=TestOrderNo_1670380867428&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=489674ed36712b2faf8dee6706aefc57
2022-12-07 10:41:08.914 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:41:08 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 10:41:45.088 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:41:45 发起post请求:下单
2022-12-07 10:41:45.088 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:41:45 请求时的入参: /pay/createOrder?amount=IDR&currency=2023&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001F9DCD6EF10>&orderNo=TestOrderNo_1670380905088&payChannel=081382826301&payerName=test&payerPhone=10000&productId=100119&subject=TestSubject&version=1.0&sign=a12703d1cf8189f458cd891ba217711a
2022-12-07 10:41:46.361 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:41:46 接口返回值: {'code': '88001', 'msg': 'Failed to convert property value of type \'java.lang.String\' to required type \'java.lang.Integer\' for property \'payChannel\'; nested exception is java.lang.NumberFormatException: For input string: "081382826301"'}
2022-12-07 10:43:23.283 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:43:23 发起post请求:下单
2022-12-07 10:43:23.283 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:43:23 请求时的入参: /pay/createOrder?amount=IDR&currency=2023&expectPayCodeType=0&merchantId=<__main__.Order object at 0x00000263641BEF10>&orderNo=TestOrderNo_1670381003283&payChannel=081382826301&payerName=test&payerPhone=10000&productId=100119&subject=TestSubject&version=1.0&sign=bf703aae6ab896cbb59c1a578b154065
2022-12-07 10:43:24.587 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:43:24 接口返回值: {'code': '88001', 'msg': 'Failed to convert property value of type \'java.lang.String\' to required type \'java.lang.Integer\' for property \'payChannel\'; nested exception is java.lang.NumberFormatException: For input string: "081382826301"'}
2022-12-07 10:45:43.050 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:45:43 发起post请求:下单
2022-12-07 10:45:43.050 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:45:43 请求时的入参: /pay/createOrder?amount=IDR&currency=2023&expectPayCodeType=0&merchantId=<__main__.Order object at 0x0000013FFDD9EF10>&orderNo=TestOrderNo_1670381143051&payChannel=081382826301&payerName=test&payerPhone=10000&productId=100119&subject=TestSubject&version=1.0&sign=341bd7adb1da6ce6890ce579b332eb1f
2022-12-07 10:45:44.354 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:45:44 接口返回值: {'code': '88001', 'msg': 'Failed to convert property value of type \'java.lang.String\' to required type \'java.lang.Integer\' for property \'payChannel\'; nested exception is java.lang.NumberFormatException: For input string: "081382826301"'}
2022-12-07 10:49:52.220 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:49:52 发起post请求:下单
2022-12-07 10:49:52.221 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:49:52 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000002733FCAEF10>&orderNo=TestOrderNo_1670381392221&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=e12cd5a1e4dd9c69fd6ad18c1125fffb
2022-12-07 10:49:53.552 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:49:53 接口返回值: {'code': '88001', 'msg': 'length of merchantId field is too long'}
2022-12-07 10:51:27.172 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:51:27 发起post请求:下单
2022-12-07 10:51:27.172 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:51:27 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000002161EDAEF10>&orderNo=TestOrderNo_1670381487172&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=fbd7fc313c0ff8be5e8b9939b8a71d63
2022-12-07 10:51:28.735 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:51:28 接口返回值: {'code': '88001', 'msg': 'length of merchantId field is too long'}
2022-12-07 10:51:57.081 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:51:57 发起post请求:下单
2022-12-07 10:51:57.081 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:51:57 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000002108CD3EF10>&orderNo=TestOrderNo_1670381517082&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=58991ece0bcef891f254383f2aba4cd3
2022-12-07 10:51:58.420 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:51:58 接口返回值: {'code': '88001', 'msg': 'length of merchantId field is too long'}
2022-12-07 10:52:36.697 | DEBUG    | __main__:post:85 - 2022-12-07 10:52:36 发起post请求:模拟xendit dana下单回调成功
2022-12-07 10:52:36.699 | DEBUG    | __main__:post:86 - 2022-12-07 10:52:36 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670381556698&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=17f5d381c1eb39b7dbb8696fe4dea147
2022-12-07 10:52:39.520 | DEBUG    | __main__:post:89 - 2022-12-07 10:52:39 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': 'cecfc4db4cda0adbc2f2fd7f2b8720b2', 'orderNo': 'TestOrderNo_1670381556698', 'tradeNo': '10012022120709523765600018', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce7vvtji4d4oac5a5fr0', 'payCodeType': '1', 'expireTime': '2022-12-07 10:52:37'}
2022-12-07 10:53:15.529 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:53:15 发起post请求:下单
2022-12-07 10:53:15.529 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:53:15 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000001CA9A26EF10>&orderNo=TestOrderNo_1670381595530&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=c7c8fb6c8289b7a818bac9940920ed2e
2022-12-07 10:53:16.865 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:53:16 接口返回值: {'code': '88001', 'msg': 'length of merchantId field is too long'}
2022-12-07 10:56:59.165 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:56:59 发起post请求:下单
2022-12-07 10:56:59.166 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:56:59 请求时的入参: /pay/createOrder?amount=IDR&currency=2023&expectPayCodeType=0&merchantId=<__main__.Order object at 0x00000245A120EF40>&orderNo=TestOrderNo_1670381819166&payChannel=081382826301&payerName=test&payerPhone=10000&productId=100119&subject=TestSubject&version=1.0&sign=f32ae8acb7859e1e47e82a1235aad1f4
2022-12-07 10:57:00.484 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:57:00 接口返回值: {'code': '88001', 'msg': 'Failed to convert property value of type \'java.lang.String\' to required type \'java.lang.Integer\' for property \'payChannel\'; nested exception is java.lang.NumberFormatException: For input string: "081382826301"'}
2022-12-07 10:58:43.280 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 10:58:43 发起post请求:下单
2022-12-07 10:58:43.280 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 10:58:43 请求时的入参: /pay/createOrder?amount=IDR&currency=2023&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000002EC97F9EEE0>&orderNo=TestOrderNo_1670381923280&payChannel=081382826301&payerName=test&payerPhone=10000&productId=100119&subject=TestSubject&version=1.0&sign=c6c2ad4ca3590bcee370e598210d2472
2022-12-07 10:58:44.665 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 10:58:44 接口返回值: {'code': '88001', 'msg': 'Failed to convert property value of type \'java.lang.String\' to required type \'java.lang.Integer\' for property \'payChannel\'; nested exception is java.lang.NumberFormatException: For input string: "081382826301"'}
2022-12-07 11:00:15.909 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 11:00:15 发起post请求:下单
2022-12-07 11:00:15.910 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 11:00:15 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x000002775CE7EF40>&orderNo=TestOrderNo_1670382015909&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=5e3948adab556c7b5ab9caf217e2b263
2022-12-07 11:00:17.215 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 11:00:17 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 11:00:27.946 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 11:00:27 发起post请求:下单
2022-12-07 11:00:27.946 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 11:00:27 请求时的入参: /pay/createOrder?amount=&currency=&expectPayCodeType=0&merchantId=<__main__.Order object at 0x0000011A5F2AEF40>&orderNo=TestOrderNo_1670382027946&payChannel=&payerName=test&payerPhone=&productId=&subject=TestSubject&version=1.0&sign=8e38bfa3d3a8d2a1785183c926fae3b0
2022-12-07 11:00:29.257 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 11:00:29 接口返回值: {'code': '88001', 'msg': 'amount can not be blank'}
2022-12-07 11:03:39.083 | DEBUG    | lib.create_order1:post:85 - 2022-12-07 11:03:39 发起post请求:下单
2022-12-07 11:03:39.083 | DEBUG    | lib.create_order1:post:86 - 2022-12-07 11:03:39 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670382219083&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=1293ed601433f9f725bf1b899e531f55
2022-12-07 11:03:41.519 | DEBUG    | lib.create_order1:post:89 - 2022-12-07 11:03:41 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': '4e56aef24e83c91a6f6b3e4fc116eb82', 'orderNo': 'TestOrderNo_1670382219083', 'tradeNo': '10012022120710034007900015', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce80533i4d4oac5a5gl0', 'payCodeType': '1', 'expireTime': '2022-12-07 11:03:40'}
2022-12-07 11:07:13.185 | DEBUG    | __main__:post:83 - 2022-12-07 11:07:13 发起post请求:模拟xendit dana下单回调成功
2022-12-07 11:07:13.185 | DEBUG    | __main__:post:84 - 2022-12-07 11:07:13 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670382433185&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=238da21e707d7b2a0a12e8cfd98b668f
2022-12-07 11:07:16.017 | DEBUG    | __main__:post:87 - 2022-12-07 11:07:16 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': '397d36e39fdc8641df2e7629709ed554', 'orderNo': 'TestOrderNo_1670382433185', 'tradeNo': '10012022120710071416700016', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce806oopvgtcs06rs9og', 'payCodeType': '1', 'expireTime': '2022-12-07 11:07:14'}
2022-12-07 11:15:01.726 | DEBUG    | __main__:post:83 - 2022-12-07 11:15:01 发起post请求:模拟xendit dana下单回调成功
2022-12-07 11:15:01.726 | DEBUG    | __main__:post:84 - 2022-12-07 11:15:01 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670382901727&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=3d6bb286fbb5dbfcabbf4ed1939e2df9
2022-12-07 11:15:04.352 | DEBUG    | __main__:post:87 - 2022-12-07 11:15:04 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': '7183e82f40b21a3462b1243bc766eaee', 'orderNo': 'TestOrderNo_1670382901727', 'tradeNo': '10012022120710150287700014', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce80adri4d4oac5a5i40', 'payCodeType': '1', 'expireTime': '2022-12-07 11:15:02'}
2022-12-07 11:21:17.346 | DEBUG    | lib.create_order1:post:83 - 2022-12-07 11:21:17 发起post请求:下单
2022-12-07 11:21:17.346 | DEBUG    | lib.create_order1:post:84 - 2022-12-07 11:21:17 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670383277346&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=ca00a1181c4364b0985b3dc16d9a8103
2022-12-07 11:21:18.703 | DEBUG    | lib.create_order1:post:87 - 2022-12-07 11:21:18 接口返回值: {'code': '88015', 'msg': 'sign of the message is wrong'}
2022-12-07 11:22:23.700 | DEBUG    | lib.create_order1:post:83 - 2022-12-07 11:22:23 发起post请求:下单
2022-12-07 11:22:23.700 | DEBUG    | lib.create_order1:post:84 - 2022-12-07 11:22:23 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670383343700&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=dcfb23132ffb0f10a87d2df356303100
2022-12-07 11:22:26.076 | DEBUG    | lib.create_order1:post:87 - 2022-12-07 11:22:26 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': '18d906919e8ff1ede5eb83f0b57a60de', 'orderNo': 'TestOrderNo_1670383343700', 'tradeNo': '10012022120710222464700016', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce80dsbi4d4oac5a5ii0', 'payCodeType': '1', 'expireTime': '2022-12-07 11:22:24'}
2022-12-07 11:27:36.572 | DEBUG    | lib.create_order1:post:83 - 2022-12-07 11:27:36 发起post请求:下单
2022-12-07 11:27:36.572 | DEBUG    | lib.create_order1:post:84 - 2022-12-07 11:27:36 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670383656572&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=017efec0123d810d4889a56ef479f3c7
2022-12-07 11:27:39.154 | DEBUG    | lib.create_order1:post:87 - 2022-12-07 11:27:39 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': '7b9b4e64f9b368fe209bf30cbeeb0c15', 'orderNo': 'TestOrderNo_1670383656572', 'tradeNo': '10012022120710273770700018', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce80gaji4d4oac5a5j0g', 'payCodeType': '1', 'expireTime': '2022-12-07 11:27:37'}
2022-12-07 11:27:44.667 | DEBUG    | lib.create_order1:post:83 - 2022-12-07 11:27:44 发起post请求:下单
2022-12-07 11:27:44.667 | DEBUG    | lib.create_order1:post:84 - 2022-12-07 11:27:44 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670383664668&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=26f1221f5d653d197a377c35c3825d76
2022-12-07 11:27:47.035 | DEBUG    | lib.create_order1:post:87 - 2022-12-07 11:27:47 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': 'cbafccbb766373a9da44c8d29ae54455', 'orderNo': 'TestOrderNo_1670383664668', 'tradeNo': '10012022120710274563700017', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce80gcgpvgtcs06rsb0g', 'payCodeType': '1', 'expireTime': '2022-12-07 11:27:45'}
2022-12-07 11:28:34.338 | DEBUG    | lib.create_order1:post:83 - 2022-12-07 11:28:34 发起post请求:下单
2022-12-07 11:28:34.338 | DEBUG    | lib.create_order1:post:84 - 2022-12-07 11:28:34 请求时的入参: /pay/createOrder?amount=10000&currency=IDR&expectPayCodeType=0&merchantId=100119&orderNo=TestOrderNo_1670383714338&payChannel=17&payerName=test&payerPhone=081382826301&productId=2023&subject=TestSubject&version=1.0&sign=cbb3a22f7254e117391dcb7a5f903e6a
2022-12-07 11:28:36.705 | DEBUG    | lib.create_order1:post:87 - 2022-12-07 11:28:36 接口返回值: {'code': '200', 'msg': 'SUCCESS', 'sign': 'e6d2c0be7be3d5577948affbc9b59bef', 'orderNo': 'TestOrderNo_1670383714338', 'tradeNo': '10012022120710283529600013', 'payCode': 'https://ewallet-mock-connector.xendit.co/v1/ewallet_connector/checkouts?token=ce80gp3i4d4oac5a5j2g', 'payCodeType': '1', 'expireTime': '2022-12-07 11:28:35'}
